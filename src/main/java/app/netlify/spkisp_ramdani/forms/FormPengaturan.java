/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app.netlify.spkisp_ramdani.forms;

//import ModernDocking.api.DockingAPI;

import ModernDocking.DockingRegion;
import ModernDocking.app.Docking;
import ModernDocking.app.RootDockingPanel;
import app.netlify.spkisp_ramdani.panels.PanelDocking;
import app.netlify.spkisp_ramdani.utils.UtilsGlobal;
import app.netlify.spkisp_ramdani.utils.UtilsStatic;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;


/**
 *
 * @author iramd
 */
public class FormPengaturan extends javax.swing.JFrame {

    /**
     * Creates new form FormPengaturan
     */
    public FormPengaturan() {
        //initComponents();
        prepareDocking();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 759, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    FormPengaturan self = this;
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPengaturan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPengaturan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPengaturan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPengaturan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormPengaturan().setVisible(true);
            }
        });
    }
    
    UtilsGlobal spkUtil = new UtilsGlobal();
    public void prepareDocking() {
        UtilsStatic.LOGGER.info("Membuka Pengaturan...");
        Docking.initialize(this);
        UtilsStatic.LOGGER.info("Docking initialized...");
        RootDockingPanel root = null;
        try {
            root = new RootDockingPanel(this);    
        }
        catch (Throwable e) {
            UtilsStatic.LOGGER.info("Error when init RootDockPanel : " + e.getMessage());
        }
        
        UtilsStatic.LOGGER.info("Root Docking initialized...");
//        this.add(root, BorderLayout.CENTER);
        getContentPane().add(root, BorderLayout.CENTER);
        PanelDocking panelDock = new PanelDocking("Pengaturan", "pengaturan" + Math.random());
        UtilsStatic.LOGGER.info("Panel Docking 1 Initialized...");
        PanelDocking panelDock2 = new PanelDocking("Lain Lain", "lainlain" + Math.random());
        PanelDocking panelDock3 = new PanelDocking("Sampingan", "sampingan" + Math.random());
//        panelDock.setBackground(Color.GRAY);
//        panelDock.setFont(Font.getFont("monospace"));
        Docking.dock(panelDock, this);
//        Docking.newWindow(panelDock2);
//        pack();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UtilsStatic.LOGGER.info("sizeFrame" + self.getSize());
                Docking.dock(panelDock2, self, DockingRegion.EAST);
                Docking.dock(panelDock3, self, DockingRegion.SOUTH);
                self.pack();
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        self.setTitle("Setelan");
                        setIconImage(Toolkit.getDefaultToolkit().getImage(spkUtil.getAsset("logo.png")));
                        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                        Dimension frameSize = self.getSize();
                        setLocation((screenSize.width - frameSize.width)/2,(screenSize.height-frameSize.height)/2);
                }});
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}